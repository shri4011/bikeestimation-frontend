import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import Box from "@mui/material/Box";
import Collapse from "@mui/material/Collapse";
import IconButton from "@mui/material/IconButton";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Typography from "@mui/material/Typography";
import Paper from "@mui/material/Paper";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';
import {
  Backdrop,
  Button,
  CircularProgress,
  Grid2,
  Snackbar,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import AddBikeEstimation from "./AddBikeEstimation";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import 'jspdf-autotable';
import Header from "../Components/Header";

function createData(_id, name, calories, fat, carbs, protein, history) {
  return {
    _id,
    name,
    calories,
    fat,
    carbs,
    protein,
    history,
  };
}

function Row(props) {
  const {
    row,
    setEditInfo,
    setValue,
    setIsEdit,
    setShowDailog,
    getEstimationTableDataList,
    showLoading,
    setPdfRow,
  } = props;
  const [open, setOpen] = React.useState(false);

  const deleteEstimation = () => {
    const { _id } = row;
    showLoading(true);
    fetch(
      "https://bikeestimation-2.onrender.com/api/bikesEstimation/deleteEstimationDetatils",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          _id: _id,
        }),
      }
    )
      .then((response) => response.json())
      .then((data) => {
        showLoading(false);
        if (data) {
          getEstimationTableDataList();
        }
      })
      .catch((error) => {
        showLoading(false);
        console.error(error);
      });
  };

  // useEffect(() => {
  //   setPdfRow(row?._id);
  // }, [row]);

  const vehicleDetails = {
    vehicleNumber: 'ABC1234',
    ownerName: 'John Doe',
    mobileNumber: '9876543210',
    vehicleType: 'Motorcycle',
    vehicleCompany: 'Yamaha',
    vehicleModel: 'MT-15',
  };

  const partsList = [
    { type: 'Engine', company: 'Yamaha', product: 'Piston', price: '100', quantity: '2', total: '200' },
    { type: 'Brake', company: 'Honda', product: 'Brake Pad', price: '50', quantity: '4', total: '200' },
  ];

  const servicingList = [
    { serviceType: 'Oil Change', serviceOption: 'Full', price: '40', quantity: '1', total: '40' },
    { serviceType: 'Tire Change', serviceOption: 'Front and Rear', price: '150', quantity: '1', total: '150' },
  ];

  const generatePDF = () => {
    const doc = new jsPDF();

    const imgData = ""; // Base64 image data
    doc.addImage(imgData, 'PNG', 171, 10, 25, 24); // Add image (x, y, width, height)
    // Add a title
    doc.setFontSize(18);
    doc.text('Bike Estimation Report', 14, 22);

    // Add Vehicle Details
    doc.setFontSize(14);
    doc.text('Vehicle Details', 14, 30);
    doc.autoTable({
      startY: 35,
      head: [['Vehicle Number', 'Owner Name', 'Mobile Number', 'Vehicle Type', 'Vehicle Company', 'Vehicle Model']],
      body: [
        [
          vehicleDetails.vehicleNumber,
          vehicleDetails.ownerName,
          vehicleDetails.mobileNumber,
          vehicleDetails.vehicleType,
          vehicleDetails.vehicleCompany,
          vehicleDetails.vehicleModel,
        ],
      ],
    });

    // Add a Parts List Table
    doc.text('Parts List', 14, doc.lastAutoTable.finalY + 10);
    doc.autoTable({
      startY: doc.lastAutoTable.finalY + 15,
      head: [['Type', 'Company', 'Product', 'Price', 'Quantity', 'Total']],
      body: partsList.map(part => [part.type, part.company, part.product, part.price, part.quantity, part.total]),
    });

    // Add a Servicing List Table
    doc.text('Servicing List', 14, doc.lastAutoTable.finalY + 10);
    doc.autoTable({
      startY: doc.lastAutoTable.finalY + 15,
      head: [['Service Type', 'Service Option', 'Price', 'Quantity', 'Total']],
      body: servicingList.map(service => [
        service.serviceType,
        service.serviceOption,
        service.price,
        service.quantity,
        service.total,
      ]),
    });

    // Save the PDF
    doc.save('bike-estimation.pdf');
  };
  

  return (
    <>
      <TableRow sx={{ "& > *": { borderBottom: "unset" } }}>
        <TableCell>
          <IconButton
            aria-label="expand row"
            size="small"
            onClick={() => setOpen(!open)}
          >
            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </TableCell>
        <TableCell component="th" scope="row">
          {row.name}
        </TableCell>
        <TableCell align="right">{row.calories}</TableCell>
        <TableCell align="right">{row.fat}</TableCell>
        <TableCell align="right">{row.carbs}</TableCell>
        <TableCell align="right">{row.protein}</TableCell>
        <TableCell align="right">
          <IconButton
            aria-label="expand row"
            size="small"
            onClick={() => {
              setEditInfo(row);
              setIsEdit(true);
              setShowDailog(true);
            }}
          >
            <EditIcon />
          </IconButton>
          <IconButton
            aria-label="expand row"
            size="small"
            onClick={() => {
              deleteEstimation();
            }}
          >
            <DeleteIcon />
          </IconButton>
          <IconButton
            aria-label="expand row"
            size="small"
            onClick={() => {
              // setPdfRow(row?._id);

              // setTimeout(() => {
              //   debugger
              //   const getTable = document.getElementById("pdf-content");
              //   const childElement = getTable.querySelector(".child-class");
              //   if (childElement) {
              //     childElement.click();
              //   }
              // }, 1500);
              generatePDF()

              // createPdf(row);
            }}
          >
            <PictureAsPdfIcon />
          </IconButton>
        </TableCell>
      </TableRow>
      <TableRow>
        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
          <Collapse in={open} timeout="auto" unmountOnExit>
            <Box sx={{ margin: 1 }}>
              <Typography variant="h6" gutterBottom component="div">
                History
              </Typography>
              <Table size="small" aria-label="purchases">
                <TableHead>
                  <TableRow>
                    <TableCell>Title</TableCell>
                    <TableCell align="right">Price</TableCell>
                    <TableCell align="right">Quantity</TableCell>
                    <TableCell align="right">Total price ($)</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {row.history.map((historyRow) => (
                    <TableRow key={historyRow.title}>
                      <TableCell component="th" scope="row">
                        {historyRow.title}
                      </TableCell>
                      <TableCell>{historyRow.price}</TableCell>
                      <TableCell align="right">{historyRow.quantity}</TableCell>
                      <TableCell align="right">{historyRow.total}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </>
  );
}

Row.propTypes = {
  row: PropTypes.shape({
    _id: PropTypes.string.isRequired,
    calories: PropTypes.number.isRequired,
    carbs: PropTypes.number.isRequired,
    fat: PropTypes.number.isRequired,
    history: PropTypes.arrayOf(
      PropTypes.shape({
        quantity: PropTypes.number.isRequired,
        price: PropTypes.string.isRequired,
        title: PropTypes.string.isRequired,
        total: PropTypes.string.isRequired,
      })
    ).isRequired,
    name: PropTypes.string.isRequired,
    price: PropTypes.number.isRequired,
    protein: PropTypes.number.isRequired,
  }).isRequired,
};

const AlertDialog = (props) => {
  const handleClose = () => {
    props?.setShowDailog(false);
  };

  return (
    <>
      <Dialog
        open={props?.showDailog}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">
          {"Edit servicing informations"}
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            <AddBikeEstimation
              editInfo={props?.editInfo}
              edit={true}
              setShowDailog={props?.setShowDailog}
              getEstimationTableDataList={props?.getEstimationTableDataList}
            />
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancle</Button>
          {/* <Button onClick={handleClose} autoFocus>
            Edit
          </Button> */}
        </DialogActions>
      </Dialog>
    </>
  );
};

const BikeEstimationTable = ({ bikeEstimation }) => {
  const {
    vehicalNumber,
    ownerName,
    mobileNumber,
    vehicalType,
    vehicalComapny,
    vehicalModel,
    servicingList,
    partsList,
    billSubtotal,
    payableAmount,
  } = bikeEstimation;

  const exportPDF = () => {
    const input = document.getElementById("pdf-content");

    html2canvas(input).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF();
      pdf.addImage(
        imgData,
        "PNG",
        0,
        0,
        210,
        (canvas.height * 210) / canvas.width
      );
      pdf.save("bike-estimation.pdf");
    });
  };

  return (
    <div id="pdf-content" >
      {/* <div
        style={{
          marginBottom: "20px",
        }}
      >
        <Header />
      </div> */}

      {/* Vehicle Info */}
      <table
        border="1"
        cellPadding="5"
        cellSpacing="0"
        style={{ marginBottom: "20px", width: "100%" }}
      >
        <thead>
          <tr>
            <th>Vehicle Number</th>
            <th>Owner Name</th>
            <th>Mobile Number</th>
            <th>Vehicle Type</th>
            <th>Vehicle Company</th>
            <th>Vehicle Model</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>{vehicalNumber}</td>
            <td>{ownerName}</td>
            <td>{mobileNumber}</td>
            <td>{vehicalType}</td>
            <td>{vehicalComapny}</td>
            <td>{vehicalModel}</td>
          </tr>
        </tbody>
      </table>

      {/* Servicing List */}
      <h3>Servicing List</h3>
      <table
        border="1"
        cellPadding="5"
        cellSpacing="0"
        style={{ marginBottom: "20px", width: "100%" }}
      >
        <thead>
          <tr>
            <th>Service Type</th>
            <th>Service Option</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          {servicingList?.map((service, index) => (
            <tr key={index}>
              <td>{service.serviceType}</td>
              <td>{service.serviceOption}</td>
              <td>{service.price}</td>
              <td>{service.quantity}</td>
              <td>{service.total}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Parts List */}
      <h3>Parts List</h3>
      <table
        border="1"
        cellPadding="5"
        cellSpacing="0"
        style={{ marginBottom: "20px", width: "100%" }}
      >
        <thead>
          <tr>
            <th>Type</th>
            <th>Company</th>
            <th>Product</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          {partsList?.map((part, index) => (
            <tr key={index}>
              <td>{part.type}</td>
              <td>{part.company}</td>
              <td>{part.product}</td>
              <td>{part.price}</td>
              <td>{part.quantity}</td>
              <td>{part.total}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Billing Summary */}
      <h3>Billing Summary</h3>
      <table
        border="1"
        cellPadding="5"
        cellSpacing="0"
        style={{ width: "100%" }}
      >
        <tbody>
          <tr>
            <td>
              <strong>Subtotal</strong>
            </td>
            <td>{billSubtotal}</td>
          </tr>
          <tr>
            <td>
              <strong>Payable Amount</strong>
            </td>
            <td>{payableAmount}</td>
          </tr>
        </tbody>
      </table>
      <button id="download-pdf" className="child-class" onClick={exportPDF}>
        PDF
      </button>
    </div>
  );
};

export default function Dashboard(props) {
  const [estimationTableList, setEstimationTableList] = useState([]);
  const [rows, setRows] = useState([]);
  const [open, setOpen] = useState(false);
  const [snackckbarStatus, setSnackbarStatus] = useState(false);
  const [showDailog, setShowDailog] = useState(false);
  const [pdfRow, setPdfRow] = useState(null);
  const [pdfData, setPdfData] = useState({});

  const getEstimationTableDataList = () => {
    setOpen(true);
    const payload = {
      page: 1,
      limit: 10,
    };
    fetch("https://bikeestimation-2.onrender.com/api/bikesEstimation/getList", {
      //   mode: "no-cors",
      method: "POST", // You can change this to POST, DELETE, etc.
      headers: {
        "Content-Type": "application/json", // Send the request as JSON
      },
      body: JSON.stringify({
        ...payload,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        setOpen(false);
        if (data) {
          setEstimationTableList(data?.estimations);
          const createRows = data?.estimations.map((item) => {
            const servicingHistory = item?.servicingList.map((list) => {
              return {
                title: `${list?.serviceType} - ${list?.serviceOption}`,
                price: `${list?.price}`,
                quantity: `${list?.quantity}`,
                total: `${list?.total}`,
              };
            });
            const partsHistory = item?.partsList.map((list) => {
              return {
                title: `${list?.type} - ${list?.product}`,
                price: `${list?.price}`,
                quantity: `${list?.quantity}`,
                total: `${list?.total}`,
              };
            });

            const history = [...servicingHistory, ...partsHistory];

            return createData(
              item?._id,
              item?.ownerName,
              item?.mobileNumber,
              item?.vehicalNumber,
              item?.billSubtotal,
              item?.payableAmount,
              history
            );
          });

          setRows(createRows);
        }
      })
      .catch((error) => {
        setOpen(false);
        setSnackbarStatus(true);
        console.error(error.message);
      });
  };
  useEffect(() => {
    getEstimationTableDataList();
  }, []);

  useEffect(() => {
    if (pdfRow) {
      // const pdfData = rows.find((list) => list?._id === pdfRow);
      // setPdfData(pdfData);

      fetch(
        `https://bikeestimation-2.onrender.com/api/bikesEstimation/${pdfRow}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
        .then((response) => response.json())
        .then((data) => {
          if (data) {
            setPdfData(data);
          }
        })
        .catch((error) => {
          console.error(error);
        });
    }
  }, [pdfRow]);
  return (
    <>
      <TableContainer component={Paper} sx={{ marginTop: "30px" }}>
        {console.log("editRow_____", pdfRow)}
        <Table aria-label="collapsible table">
          <TableHead>
            <TableRow>
              <TableCell />
              <TableCell>Owner Name</TableCell>
              <TableCell align="right">Mobile Number</TableCell>
              <TableCell align="right">Bike Number</TableCell>
              <TableCell align="right">Billing Sub Total</TableCell>
              <TableCell align="right">Payable Amount</TableCell>
              <TableCell align="right">Action</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <Row
                key={row.name}
                row={row}
                setEditInfo={props?.setEditInfo}
                setValue={props?.setValue}
                setIsEdit={props?.setIsEdit}
                setShowDailog={setShowDailog}
                getEstimationTableDataList={getEstimationTableDataList}
                showLoading={setOpen}
                setPdfRow={setPdfRow}
              />
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Backdrop
        sx={(theme) => ({ color: "#fff", zIndex: theme.zIndex.drawer + 1 })}
        open={open}
        //   onClick={handleClose}
      >
        <CircularProgress color="inherit" />
      </Backdrop>
      <Grid2>
        <Snackbar
          open={snackckbarStatus}
          autoHideDuration={5000}
          // onClose={handleClose}
          message="Something wents wroung"
        />
      </Grid2>
      <Grid2>
        {pdfRow && pdfData && <BikeEstimationTable bikeEstimation={pdfData} />}
      </Grid2>
      <Grid2>
        <AlertDialog
          showDailog={showDailog}
          setShowDailog={setShowDailog}
          editInfo={props?.editInfo}
          getEstimationTableDataList={getEstimationTableDataList}
        />
      </Grid2>
    </>
  );
}
